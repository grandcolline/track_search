//! # エンティティ層 (Entity Layer)
//!
//! Enterprise Business Rulesの責務を担当する層。
//!
//! 「エンティティ(Entity)」と「値オブジェクト(VO)」の
//! Structとそれらの振る舞いを定義していく。
//!
//! この層ではなるべく外部パッケージは使わず、
//! 使うクレートは[Standard Library](https://doc.rust-lang.org/std/)のみにすることを目指す。
//!
//! ## 🌴 レイヤー内構成
//!
//! * 集約ごとにモジュール分割をする。
//! * モジュール内に「エンティティ(Entity)」「値オブジェクト(VO)」を並列に配置する。
//!   * 個々の要素の詳細は[#-要素](#-要素)を参照
//!
//! ## 📌 ドメインモデル図
//!
//! 集約ごとにドメインモデル図を作っていく。
//! ドメインモデル図は各集約配下に、 `_diagram()`というメソッドを作りそのドキュメントに記載する。
//!
//! ドメインモデル図は
//!
//! ### 参考
//! * [UMLのクラス図における関係の考察](https://crieit.net/posts/UML)
//! * [classDiagram](https://mermaid-js.github.io/mermaid/#/classDiagram)
//!
//! ## 🌱 要素
//!
//! ### エンティティ (Entity)
//!
//! 属性ではなく同一性によって識別されるStruct。
//! * 可変である
//! * 同じ属性であっても区別される
//! * 同一性により区別される
//!
//! <details>
//! <summary>これは中身が整形される</summary>
//!
//! 1. 野菜**A**の皮を剥く。
//! 2. 乱切りにする。
//! 3. 調味料**B**と合わせて炒める。
//!     - `火傷`に注意。
//! </details>
//!
//! #### サンプル実装
//!
//! ```rust
//! // TODO: サンプル実装
//! ```
//! #### 実装の注意点
//!
//! * ファイル名を `xxx_entity.rs` とする。
//! * 1つの関心ごとに集中できるようなエンティティを設計する。
//! * IDを必ず持つ。IDによって同一性を担保する。
//! * プロパティを少なく保つ。
//!   * 5個を超えたら減らせないか検討すること！
//! * setterを書かない。
//!   * プロパティを直接変更するのではなく、振る舞いによりプロパティを変更する。
//!
//! #### 参考
//! * [https://caddi.tech/archives/2021](https://caddi.tech/archives/2021)
//!
//! ### 値オブジェクト (VO)
//!
//! システム固有の値をオブジェクトとして定義したStruct。
//! * 不変(イミュータブル)である
//! * 交換が可能である
//! * 等価性によって比較される
//!
//! #### サンプル実装
//!
//! ```rust
//! // TODO: サンプル実装
//! ```
//!
//! #### 参考
//! * [https://caddi.tech/archives/1373](https://caddi.tech/archives/1373)
//!
pub mod error;
pub mod track;
